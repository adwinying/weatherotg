package pages

import (
	"github.com/adwinying/weatherotg/lib"
	"github.com/adwinying/weatherotg/templates/components"
	i "github.com/callsamu/templicons"
	"fmt"
	"strings"
)

func formattedForecastsToTemplateForecasts(
	unit lib.TemperatureUnit,
	formatted []lib.FormattedForecastWeatherInfo,
) []components.Forecast {
	result := []components.Forecast{}
	for _, forecast := range formatted {
		temp := func() string {
			if unit == lib.Celsius {
				return forecast.Detail.TempC + "°C"
			} else {
				return forecast.Detail.TempF + "°F"
			}
		}()

		wind := func() string {
			if unit == lib.Celsius {
				return fmt.Sprintf("%.0fm/s", forecast.WindSpeedMs)
			} else {
				return fmt.Sprintf("%smph", forecast.Detail.WindSpeedMiles)
			}
		}()

		result = append(result, components.Forecast{
			Title:        forecast.Timestamp.Format("15:04"),
			Description:  forecast.Description,
			Icon:         forecast.Icon,
			Temperature:  temp,
			ChanceOfRain: forecast.Detail.ChanceOfRain,
			WindSpeed:    wind,
		})
	}

	return result
}

type FormatParams struct {
	IsLocationSet bool
	Location      string
	IsModeSet     bool
	Mode          lib.DisplayMode
	IsUnitSet     bool
	Unit          lib.TemperatureUnit
}

func formatUrl(params FormatParams) string {
	queries := []string{}

	if params.IsLocationSet && params.Location != "" {
		queries = append(queries, "location="+params.Location)
	}

	if params.IsModeSet && params.Mode != "" {
		queries = append(queries, "mode="+string(params.Mode))
	}

	if params.IsUnitSet && params.Unit != "" {
		queries = append(queries, "unit="+string(params.Unit))
	}

	if len(queries) == 0 {
		return "/"
	}

	return fmt.Sprintf("/?%s", strings.Join(queries, "&"))
}

func formatJson(params FormatParams) string {
	keyVals := []string{}

	if params.IsLocationSet && params.Location != "" {
		keyVals = append(keyVals, fmt.Sprintf("\"location\": \"%s\"", params.Location))
	}

	if params.IsModeSet && params.Mode != "" {
		keyVals = append(keyVals, fmt.Sprintf("\"mode\": \"%s\"", string(params.Mode)))
	}

	if params.IsUnitSet && params.Unit != "" {
		keyVals = append(keyVals, fmt.Sprintf("\"unit\": \"%s\"", string(params.Unit)))
	}

	return fmt.Sprintf("{%s}", strings.Join(keyVals, ","))
}

templ IndexContent(
	isLocationSet bool,
	location string,
	isModeSet bool,
	mode lib.DisplayMode,
	isUnitSet bool,
	unit lib.TemperatureUnit,
	weatherInfo *lib.FormattedWeather,
) {
	<div
		id="index-content"
		hx-on::before-swap="beforeWeatherInfoSwap(event)"
	>
		<script>
      function beforeWeatherInfoSwap(e) {
        if (!e.detail.shouldSwap) return
        if (e.detail.requestConfig.elt.value !== 'minimal') return

        e.detail.target = htmx.find('#content')
      }
    </script>
		if mode != lib.Minimal {
			<div class="flex items-center justify-between gap-3">
				<label
					id="search-location"
					class="input input-bordered flex items-center gap-2 min-w-0 max-w-[15rem]"
				>
					<span class="shrink-0">
						@i.Icon("mdi:magnify", i.Params().SetDimensions(16, 16))
					</span>
					<input
						type="text"
						name="location"
						class="min-w-0 grow"
						placeholder="Search"
						value={ location }
						hx-get="/"
						hx-swap="outerHTML"
						hx-target="#index-content"
						hx-indicator="#search-location"
						hx-vals={ formatJson(FormatParams{
								IsModeSet: isModeSet,
								Mode: mode,
								IsUnitSet: isUnitSet,
								Unit: unit,
						}) }
						hx-trigger="change"
					/>
					if !isLocationSet {
						<div
							class="htmx-request:hidden tooltip flex items-center"
							data-tip="Location determined by your IP address"
						>
							<button>
								@i.Icon("mdi:help-circle", i.Params().SetDimensions(16, 16))
							</button>
						</div>
					}
					<span
						class="htmx-request:flex hidden h-full items-center justify-center *:animate-spin"
					>
						@i.Icon("mdi:loading", i.Params().SetDimensions(16, 16))
					</span>
				</label>
				<div class="flex items-center gap-3">
					<span
						id="select-mode-loading"
						class="htmx-request:flex hidden h-full items-center justify-center *:animate-spin"
					>
						@i.Icon("mdi:loading", i.Params().SetDimensions(28, 28))
					</span>
					<label class="relative form-control w-fit">
						<select
							id="select-mode"
							name="mode"
							class="select select-bordered max-w-xs"
							hx-get="/"
							hx-swap="outerHTML"
							hx-target="#index-content"
							hx-indicator="#select-mode-loading"
							hx-vals={ formatJson(FormatParams{
								IsLocationSet: isLocationSet,
								Location: location,
								IsUnitSet: isUnitSet,
								Unit: unit,
							}) }
							hx-trigger="change"
						>
							<option disabled>Display Mode</option>
							for _, displayMode := range lib.DisplayModeOrder {
								<option
									selected?={ mode == displayMode }
									value={ string(displayMode) }
								>
									{ lib.DisplayModeStringMap[displayMode] }
								</option>
							}
						</select>
					</label>
				</div>
			</div>
		}
		<div class="flex items-center gap-3 mx-auto max-w-fit my-4">
			<div>
				@i.Icon(weatherInfo.Current.Icon, i.Params().SetDimensions(80, 80))
			</div>
			<div>
				<h1 class="text-2xl font-bold">{ weatherInfo.Current.Location }</h1>
				<p class="leading-snug">
					{ weatherInfo.Current.Description }
					<br/>
					if unit == lib.Celsius && mode != lib.Minimal {
						{ weatherInfo.Current.Detail.TempC }°C/<a
	class="underline"
	href={ templ.URL(formatUrl(FormatParams{
		IsLocationSet: isLocationSet,
		Location: location,
		IsModeSet: isModeSet,
		Mode: mode,
		IsUnitSet: true,
		Unit: lib.Fahrenheit,
	})) }
	hx-get={ formatUrl(FormatParams{
		IsLocationSet: isLocationSet,
		Location: location,
		IsModeSet: isModeSet,
		Mode: mode,
		IsUnitSet: true,
		Unit: lib.Fahrenheit,
	}) }
	hx-swap="outerHTML"
	hx-target="#index-content"
	hx-indicator="#click-unit-loading"
	hx-trigger="click"
>°F</a>
						<span
							id="click-unit-loading"
							class="htmx-request:inline-flex hidden h-full items-center justify-center *:animate-spin"
						>
							@i.Icon("mdi:loading", i.Params().SetDimensions(16, 16))
						</span>,
						{ fmt.Sprintf("%.2f", weatherInfo.Current.WindSpeedMs) }m/s
					} else if unit == lib.Celsius && mode == lib.Minimal {
						{ weatherInfo.Current.Detail.TempC }°C,
						{ fmt.Sprintf("%.2f", weatherInfo.Current.WindSpeedMs) }m/s
					} else if unit == lib.Fahrenheit && mode != lib.Minimal {
						{ weatherInfo.Current.Detail.TempF }°F/<a
	class="underline"
	href={ templ.URL(formatUrl(FormatParams{
		IsLocationSet: isLocationSet,
		Location: location,
		IsModeSet: isModeSet,
		Mode: mode,
		IsUnitSet: true,
		Unit: lib.Celsius,
	})) }
	hx-get={ formatUrl(FormatParams{
		IsLocationSet: isLocationSet,
		Location: location,
		IsModeSet: isModeSet,
		Mode: mode,
		IsUnitSet: true,
		Unit: lib.Celsius,
	}) }
	hx-swap="outerHTML"
	hx-target="#index-content"
	hx-indicator="#click-unit-loading"
	hx-trigger="click"
>°C</a>
						<span
							id="click-unit-loading"
							class="htmx-request:inline-flex hidden h-full items-center justify-center *:animate-spin"
						>
							@i.Icon("mdi:loading", i.Params().SetDimensions(16, 16))
						</span>,
						{ weatherInfo.Current.Detail.WindSpeedMiles }mph
					} else if unit == lib.Fahrenheit && mode == lib.Minimal {
						{ weatherInfo.Current.Detail.TempF }°F,
						{ weatherInfo.Current.Detail.WindSpeedMiles }mph
					}
					{ weatherInfo.Current.Detail.Winddir16Point }
				</p>
			</div>
		</div>
		<div class="space-y-5 mb-6">
			if mode == lib.Default {
				@components.ForecastGroup(formattedForecastsToTemplateForecasts(
					unit,
					weatherInfo.Forecast[:],
				))
			}
			if mode == lib.Extended {
				for _, daily := range weatherInfo.Daily {
					<div class="card rounded bg-neutral shadow-xl pt-3 pb-6">
						<h3 class="mb-3 font-bold text-center">
							{ daily.Timestamp.Format("2006/01/02") }
						</h3>
						@components.ForecastGroup(formattedForecastsToTemplateForecasts(
							unit,
							daily.Hourly[:],
						))
					</div>
				}
			}
		</div>
	</div>
}
